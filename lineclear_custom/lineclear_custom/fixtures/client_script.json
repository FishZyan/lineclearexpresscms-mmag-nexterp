[
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Invoice",
  "enabled": 1,
  "modified": "2025-03-21 09:17:24.568734",
  "module": "LineClear Custom",
  "name": "Sales Invoice Debtor Code",
  "script": "frappe.ui.form.on('Sales Invoice', {\n    customer: function(frm) {\n        frappe.db.get_value('Customer', frm.doc.customer, 'debtor_code')\n            .then(response => {\n                if(response.message.debtor_code != frm.doc.debtor_code){\n                    frm.set_value('custom_debtor_code', response.message.debtor_code);\n                }\n            });\n    }\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Invoice",
  "enabled": 1,
  "modified": "2025-08-20 10:53:44.002947",
  "module": "LineClear Custom",
  "name": "Sales Invoice Tax Calculation",
  "script": "frappe.ui.form.on('Sales Invoice', {\n\tvalidate: function(frm) {\n        frm.doc.items.forEach(item => {\n            update_item_tax_amount(frm, item.doctype, item.name);\n        });\n        update_item_taxes(frm);\n    },\n    refresh: function(frm) {\n        hide_field(frm);\n        if (frm.doc.custom_lhdn_status == 'InProgress') {\n\t        frm.set_df_property('custom_refresh_status', 'hidden', 0);\n\t    } else {\n\t        frm.set_df_property('custom_refresh_status', 'hidden', 1);\n\t    }\n\t    if (frm.is_new()) {\n\t        if (frm.doc.items && frm.doc.items.length > 0) {\n                let first_row = frm.doc.items[0];\n                if (!first_row.income_account) {\n                    frm.clear_table('items');\n                    let row = frm.add_child('items');\n                        frappe.db.exists('Item', 'Courier Service').then(exists => {\n                            if (exists && !row.item_code) {\n                                frappe.db.get_doc('Company', frm.doc.company).then(company => {\n                                    frappe.db.get_doc('Item', 'Courier Service').then(item => {\n                                        row.item_code = item.name;\n                                        row.item_name = item.item_name;\n                                        row.custom_item_classification_code = item.custom_item_classification_code;\n                                        row.custom_item_classification_description = item.custom_classification_description;\n                                        row.description = item.description;\n                                        row.qty = 1;\n                                        row.uom = item.stock_uom;\n                                        row.income_account = company.default_income_account;\n                                        frm.refresh_field(\"items\");\n                                    });\n                                });\n                            }\n                        });\n                }\n            }\n        }\n    }\n});\n\nfunction hide_field(frm) {\n    frm.set_df_property('currency', 'hidden', 1);\n    frm.set_df_property('selling_price_list', 'hidden', 1);\n    frm.set_df_property('company', 'hidden', 1);\n}\n\nfrappe.ui.form.on('Sales Invoice Item', {\n\trate: function(frm, cdt, cdn){\n\t    update_item_tax_amount(frm, cdt, cdn);\n\t},\n\tqty: function(frm, cdt, cdn){\n\t    update_item_tax_amount(frm, cdt, cdn);\n\t},\n\tcustom_tax_code: function(frm, cdt, cdn){\n\t    update_item_tax_amount(frm, cdt, cdn);\n\t},\n// \tcustom_tax_amount: function(frm, cdt, cdn){\n// \t    update_item_taxes(frm);\n// \t},\n\tcustom_tax_adjustment: function(frm, cdt, cdn){\n\t    update_item_tax_amount(frm, cdt, cdn);\n\t},\n\tcustom_lhdn_status: function(frm,cdt,cdn){\n\t    if (frm.doc.custom_lhdn_status == 'InProgress') {\n\t        frm.set_df_property('custom_refresh_status', 'hidden', 0);\n\t    } else {\n\t        frm.set_df_property('custom_refresh_status', 'hidden', 1);\n\t    }\n\t},\n\titems_add: function(frm, cdt, cdn) {\n        let row = locals[cdt][cdn];\n        frappe.db.exists('Item', 'Courier Service').then(exists => {\n            if (exists && !row.item_code) {\n                frappe.db.get_doc('Company', frm.doc.company).then(company => {\n                    frappe.db.get_doc('Item', 'Courier Service').then(item => {\n                        row.item_code = item.name;\n                        row.item_name = item.item_name;\n                        row.custom_item_classification_code = item.custom_item_classification_code;\n                        row.custom_item_classification_description = item.custom_classification_description;\n                        row.description = item.description;\n                        row.qty = 1;\n                        row.uom = item.stock_uom;\n                        row.income_account = company.default_income_account;\n                        frm.refresh_field(\"items\");\n                    });\n                });\n            }\n        });\n\t}\n// \tform_render: function (frm, cdt, cdn) {\n// \t    set_default_item(frm, cdt, cdn);\n// \t    frm.refresh_field('items');\n// \t}\n});\n\n\nfunction set_default_item(frm, cdt, cdn) {\n    // only set if item_code is empty, avoid overwriting existing rows\n    let row = locals[cdt][cdn];\n    if (row.item_code) return;\n\n    frappe.db.exists('Item', 'Courier Service').then(exists => {\n        if (exists) {\n            frappe.db.get_doc('Item', 'Courier Service').then(item => {\n                frappe.model.set_value(cdt, cdn, 'item_code', item.name);\n                frappe.model.set_value(cdt, cdn, 'item_name', item.item_name);\n                frappe.model.set_value(cdt, cdn, 'custom_item_classification_code', item.custom_item_classification_code);\n                frappe.model.set_value(cdt, cdn, 'custom_item_classification_description', item.custom_classification_description);\n                frappe.model.set_value(cdt, cdn, 'description', item.description);\n                frappe.model.set_value(cdt, cdn, 'qty', 1);\n                frappe.model.set_value(cdt, cdn, 'uom', item.stock_uom);\n            });\n        }\n    });\n}\n\nfunction update_item_tax_amount(frm, cdt, cdn){\n    let row = locals[cdt][cdn];\n    if(row.custom_tax_code){\n        frappe.call({\n            method: \"frappe.client.get\",\n            args: {\n                doctype: \"Sales Taxes and Charges Template\",\n                name: row.custom_tax_code\n            },\n            callback: function(r) {\n                if (r.message && r.message.taxes && r.message.taxes.length > 0) {\n                    // Assuming you want to apply the first tax rate\n                    let tax_rate = r.message.taxes[0].rate;\n                    let tax_amount = row.rate * row.qty * (tax_rate / 100) + row.custom_tax_adjustment;\n\n                    frappe.model.set_value(cdt, cdn, 'custom_tax_amount', tax_amount);\n                }\n            }\n        });\n    } else {\n        frappe.model.set_value(cdt, cdn, 'custom_tax_amount', 0);\n    }\n}\n\n\nfunction update_item_taxes(frm) {\n    // First, clear the taxes table\n    frm.clear_table('taxes');\n\n    // Call server to get the company's custom_default_tax_account\n    frappe.call({\n        method: 'frappe.client.get_value',\n        args: {\n            doctype: 'Company',\n            filters: { name: frm.doc.company },\n            fieldname: 'custom_default_tax_account'\n        },\n        callback: function(r) {\n            if (r.message) {\n                let default_tax_account = r.message.custom_default_tax_account;\n\n                if (!default_tax_account) {\n                    frappe.msgprint(__('Please fill in the <b>Default Tax Account</b> in the Company record.'));\n                    return;\n                }\n\n                // Now, add taxes for each item\n                (frm.doc.items || []).forEach(item => {\n                    let tax = frm.add_child('taxes');\n                    tax.charge_type = 'Actual';\n                    tax.account_head = default_tax_account;\n                    tax.description = `Tax for Item: ${item.item_name}`;\n                    tax.tax_amount = item.custom_tax_amount;\n                    tax.rate = 0;\n                });\n\n                frm.refresh_field('taxes');\n            } else {\n                frappe.msgprint(__('Could not fetch the Company record. Please check the Company name.'));\n            }\n        }\n    });\n}\n\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Import Data",
  "enabled": 0,
  "modified": "2025-04-18 11:24:26.049959",
  "module": "LineClear Custom",
  "name": "ImportButton",
  "script": "frappe.ui.form.on('Import Data', {\n\trefresh(frm) {\n\t    if (frm.doc.status != \"Completed\") {\n    \t\tfrm.add_custom_button(__(\"Import Data\"), function() {\n    \t\t    frm.call({\n        \t\t    method:\"lineclear_custom.lineclear_custom.data_import.import_data\",\n        \t\t    args: {\n                        \"document_type\": frm.doc.document_type,\n                        \"file\": frm.doc.file_attach,\n                        \"docname\": frm.doc.name\n                    },\n                    callback: function(response) {\n                        if (response.message) {  \n                            frm.reload_doc();\n                        }\n                        frm.reload_doc();\n                    }\n    \t\t    });\n    \t\t});\n\t    }\n\t},\n\tdocument_type: function(frm){\n\t    if(!frm.doc.document_type){\n\t        frm.set_df_property('template', 'hidden', 1);\n\t    }else {\n\t        frm.set_df_property('template', 'hidden', 0);\n\t    }\n\t},\n\ttemplate: function(frm){\n\t    const documentType = frm.doc.document_type;\n        const url = `/api/method/lineclear_custom.lineclear_custom.data_import.generate_excel_template?document_type=${documentType}`;\n        window.open(url);\n\t}\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Invoice",
  "enabled": 0,
  "modified": "2025-04-14 16:00:05.421251",
  "module": "LineClear Custom",
  "name": "Sales Invoice - Custom DN CN Button",
  "script": "frappe.listview_settings['Sales Invoice'].onload = (listview) => {\n        listview.page.add_inner_button('Create Debit Note', () => {\n            frappe.msgprint(\"Debit Note button clicked!\");\n\n            // frappe.new_doc(\n            //     doctype = 'Journal Entry', \n            //     {   // entry_type = voucher_type\n            //         voucher_type: \"Debit Note\",\n            //     }\n            // );\n        });\n\n        listview.page.add_button('Create Credit Note', () => {\n            frappe.msgprint(\"Debit Note button clicked!\");\n            \n            // frappe.new_doc(\n            //     doctype = 'Journal Entry', \n            //     {   // entry_type = voucher_type\n            //         voucher_type: \"Credit Note\",\n            //     }\n            // );\n        });\n}",
  "view": "List"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Invoice",
  "enabled": 0,
  "modified": "2025-03-06 11:17:22.881488",
  "module": "LineClear Custom",
  "name": "E-invoice Sales Invoice",
  "script": "frappe.ui.form.on('Sales Invoice', {\n\trefresh(frm) {\n        // if (frm.doc.custom_lhdn_status === \"Valid\") {\n        //     frm.add_custom_button(__('Generate E-invoice'), function() {\n        //         frappe.call({\n        //             method: \"lineclear_custom.lineclear_custom.print_format.e_invoice.generate_custom_print_format\",\n        //             args: { docname: frm.doc.name },\n        //             callback: function(response) {\n        //                 let file_url = response.message.file_url;\n        //                 window.open(file_url); \n        //             }\n        //         });\n        //     });\n        // }\n    }\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Invoice",
  "enabled": 0,
  "modified": "2025-04-30 09:00:08.136524",
  "module": "LineClear Custom",
  "name": "Filter ESV tax",
  "script": "frappe.ui.form.on('Sales Invoice', {\r\n    refresh: function(frm) {\r\n        frm.fields_dict['second_tax'].get_query = function(doc) {\r\n            return {\r\n                filters: {\r\n                    company: doc.company  // Filter tax templates for the current company\r\n                }\r\n            };\r\n        };\r\n    },\r\n    \r\n    onload: function(frm) {\r\n        if(frm.is_new() && frm.doc.status===\"Draft\" && frm.doc.customer){\r\n            frappe.db.get_value('Customer', frm.doc.customer, 'sst_exemption') \r\n                .then(response => {\r\n                    frm.set_value('tax_exemption', response.message.sst_exemption ? 1 :0);\r\n                });\r\n        }\r\n    },\r\n    \r\n    customer: function(frm) {\r\n        frappe.db.get_value('Customer', frm.doc.customer, 'sst_exemption')\r\n            .then(response => {\r\n                frm.set_value('tax_exemption', response.message.sst_exemption ? 1 :0);\r\n            });\r\n    },\r\n    \r\n    tax_exemption: function(frm) {\r\n        frappe.db.get_value('Company', frm.doc.company, 'abbr')\r\n        .then(response => {\r\n            let abbr = response.message.abbr;\r\n            if (frm.doc.tax_exemption) {  // Check if the checkbox is checked\r\n                frm.set_value('taxes_and_charges', \"ESV-6 - \" + abbr);\r\n                 frm.set_value('second_tax', \"\");\r\n                 frm.set_df_property('taxes_and_charges', 'read_only', 1);\r\n                 frm.set_df_property('second_tax', 'read_only', 1);\r\n            } else {\r\n                frm.set_value('taxes_and_charges', \"SV-6 - \" + abbr); // Optional: Clear field if unchecked\r\n                frm.set_value('second_tax', \"\");\r\n                frm.set_df_property('taxes_and_charges', 'read_only', 0);\r\n                frm.set_df_property('second_tax', 'read_only', 0);\r\n            }\r\n        });\r\n    },\r\n    \r\n    second_tax: function(frm) {\r\n        if (frm.doc.second_tax && frm.doc.taxes_and_charges) {\r\n            frappe.call({\r\n                method: \"frappe.client.get\",\r\n                args: {\r\n                    doctype: \"Sales Taxes and Charges Template\",\r\n                    name: frm.doc.taxes_and_charges\r\n                },\r\n                callback: function(r1) {\r\n                    if (r1.message) {\r\n                        frappe.call({\r\n                            method: \"frappe.client.get\",\r\n                            args: {\r\n                                doctype: \"Sales Taxes and Charges Template\",\r\n                                name: frm.doc.second_tax\r\n                            },\r\n                            callback: function(r2) {\r\n                                if (r2.message) {\r\n                                    // Clear existing taxes\r\n                                    frm.set_value(\"taxes\", []);\r\n\r\n                                    // Add First Tax Template\r\n                                    $.each(r1.message.taxes, function(index, tax) {\r\n                                        let new_tax = frm.add_child(\"taxes\");\r\n                                        new_tax.charge_type = tax.charge_type;\r\n                                        new_tax.account_head = tax.account_head;\r\n                                        new_tax.rate = tax.rate;\r\n                                        new_tax.description = tax.description;\r\n                                    });\r\n\r\n                                    // Add Second Tax Template\r\n                                    $.each(r2.message.taxes, function(index, tax) {\r\n                                        let new_tax = frm.add_child(\"taxes\");\r\n                                        new_tax.charge_type = tax.charge_type;\r\n                                        new_tax.account_head = tax.account_head;\r\n                                        new_tax.rate = tax.rate;\r\n                                        new_tax.description = tax.description;\r\n                                    });\r\n\r\n                                    frm.refresh_field(\"taxes\");\r\n                                }\r\n                            }\r\n                        });\r\n                    }\r\n                }\r\n            });\r\n        } else if (!frm.doc.second_tax && frm.doc.taxes_and_charges) {\r\n            frappe.call({\r\n                method: \"frappe.client.get\",\r\n                args: {\r\n                    doctype: \"Sales Taxes and Charges Template\",\r\n                    name: frm.doc.taxes_and_charges\r\n                },\r\n                callback: function(response) {\r\n                    if (response.message) {\r\n                        frm.set_value('taxes', []);  // Clear all taxes\r\n                        frm.refresh_field('taxes');\r\n\r\n                        // Add first tax\r\n                        frm.set_value('taxes', response.message.taxes);\r\n                        frm.refresh_field('taxes');\r\n                    }\r\n                }\r\n            });\r\n            frm.refresh_field(\"taxes\");\r\n        }\r\n    },\r\n    \r\n    taxes_and_charges: function(frm) {\r\n        if (frm.doc.taxes_and_charges && !frm.doc.tax_exemption){\r\n            frm.set_df_property('second_tax', 'read_only', 0);\r\n        } else {\r\n            frm.set_df_property('second_tax', 'read_only', 1);\r\n        }\r\n        \r\n        if (!frm.doc.taxes_and_charges) {\r\n            frm.set_value(\"taxes\", []);\r\n            frm.set_value(\"second_tax\", \"\");\r\n            frm.refresh_field(\"taxes\");\r\n        } \r\n        else if (frm.doc.taxes_and_charges && frm.doc.second_tax) {\r\n            console.log(\"tests\");\r\n        }\r\n    }\r\n});\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Journal Entry",
  "enabled": 1,
  "modified": "2025-04-07 14:46:26.171892",
  "module": "LineClear Custom",
  "name": "Set Default Stamp User",
  "script": "frappe.ui.form.on('Journal Entry', {\r\n    onload: function (frm) {\r\n        if (frm.is_new()) { // Check if the document is new\r\n            frm.set_value('custom_created_by', frappe.session.user);\r\n        }\r\n    }\r\n});\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Customer",
  "enabled": 0,
  "modified": "2025-06-19 13:56:19.582210",
  "module": "LineClear Custom",
  "name": "Customer Debtor Code",
  "script": "frappe.ui.form.on('Customer', {\r\n    customer_name: function(frm) {\r\n        if (frm.doc.customer_name) {\r\n            // Get the first letter of the customer name in uppercase\r\n            let first_letter = frm.doc.customer_name.charAt(0).toUpperCase();\r\n            let base_code = `300-${first_letter}`;\r\n\r\n            frappe.call({\r\n                method: 'frappe.client.get_list',\r\n                args: {\r\n                    doctype: 'Customer',\r\n                    filters: [['debtor_code', 'like', `${base_code}%`]],\r\n                    fields: ['debtor_code'],\r\n                    order_by: 'debtor_code desc',\r\n                    limit_page_length: 1000\r\n                },\r\n                callback: function(r) {\r\n                    let next_number = '00001'; // Default if no existing codes\r\n\r\n                    if (r.message && r.message.length > 0) {\r\n                        // Find the max number from all matches\r\n                        let max_number = 0;\r\n\r\n                        r.message.forEach(row => {\r\n                            let code = row.debtor_code;\r\n                            let parts = code.split('-');\r\n                            if (parts.length === 2 && parts[0] === '300' && parts[1].startsWith(first_letter)) {\r\n                                let numeric_part = parts[1].slice(1).replace(/^0+/, '') || '0';\r\n                                let number = parseInt(numeric_part);\r\n                                if (number > max_number) {\r\n                                    max_number = number;\r\n                                }\r\n                            }\r\n                        });\r\n\r\n                        next_number = String(max_number + 1).padStart(5, '0');\r\n                    }\r\n\r\n                    let debtor_code = `${base_code}${next_number}`;\r\n                    frm.set_value('debtor_code', debtor_code);\r\n                }\r\n            });\r\n        } else {\r\n            frm.set_value('debtor_code', \"\");\r\n        }\r\n    }\r\n\r\n    // Uncomment this if you want to prefix the customer name with the debtor code\r\n    /*\r\n    debtor_code: function(frm) {\r\n        if (frm.doc.debtor_code && frm.doc.customer_name) {\r\n            let customer_name = frm.doc.debtor_code + \" \" + frm.doc.customer_name;\r\n            frm.set_value('customer_name', customer_name);\r\n        }\r\n    }\r\n    */\r\n});\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Customer",
  "enabled": 1,
  "modified": "2025-08-05 07:48:07.898246",
  "module": "LineClear Custom",
  "name": "Customer Type",
  "script": "frappe.ui.form.on('Customer', {\n\trefresh: function(frm) {\n        frm.set_df_property('customer_type', 'options', [\n            '', 'Company', 'Individual', 'Partnership', 'Government', 'Foreign'\n        ]);\n        frm.set_df_property('tax_id', 'read_only', 1);\n        \n        let field_to_move = frm.fields_dict['custom_sst_registration_no'].$wrapper;\n        let target_field = frm.fields_dict['sst_exemption'].$wrapper;\n        field_to_move.insertAfter(target_field);\n        \n        $(frm.fields_dict['msic'].input).on('keyup', function() {\n            frm.set_query('msic', function() {\n                return {\n                    query:\"lineclear_custom.lineclear_custom.get_msic_option.get_industrial_classification_options\"\n                };\n            });\n        });\n        \n        if (frm.doc.customer_type == \"\") {\n            frm.set_df_property('tin_code', 'options', [\n                \"\"\n            ]);\n            \n        } else if (frm.doc.customer_type == \"Individual\") {\n            frm.set_df_property('tin_code', 'options', [\n                \"IG\",\n                \"SG\",\n                \"OG\",\n                \"EI\"\n            ]);\n            \n        } else if (frm.doc.customer_type == \"Foreign\") {\n            frm.set_df_property('tin_code', 'options', [\n                \"EI\"\n            ]);\n            \n        } else {\n            frm.set_df_property('tin_code', 'options', [\n                \"C - Companies\",\n                \"CS - Cooperative Societies\",\n                \"D - Partnerships\",\n                \"E - Employers\",\n                \"F - Associations\",\n                \"FA - Non-Resident Public Entertainers\",\n                \"PT - Limited Liability Partnerships\",\n                \"TA - Trust Bodies\",\n                \"TC - Unit Trusts/ Property Trusts\",\n                \"TN - Business Trusts\" ,\n                \"TR - Real Estate Investment Trusts/Property Trust Funds\",\n                \"TP - Deceased Person’s Estate\",\n                \"J - Hindu Joint Families\",\n                \"LE - Labuan Entities\"\n            ]);\n        }\n    },\n    \n    tin_number: function(frm) {\n        if (frm.doc.tin_number) {\n            let tax_id = \"\";\n            if (frm.doc.tin_code) {\n                tax_id += frm.doc.tin_code.split(\" - \")[0];\n            }\n            tax_id += frm.doc.tin_number;\n            frm.set_value('tax_id', tax_id);\n        } else{\n            frm.set_value('tax_id', \"\");\n        }\n    },\n    \n    tin_code: function(frm) {\n        if (frm.doc.tin_code && frm.doc.tin_number) {\n            let tax_id = \"\";\n            if (frm.doc.tin_code) {\n                tax_id += frm.doc.tin_code.split(\" - \")[0];\n            }\n            tax_id += frm.doc.tin_number;\n            frm.set_value('tax_id', tax_id);\n        }\n    },\n    \n    customer_type: function(frm) {\n        if (frm.doc.customer_type == \"\") {\n            frm.set_df_property('tin_code', 'options', [\n                \"\"\n            ]);\n            frm.set_value('tin_code', \"\");\n        } else if (frm.doc.customer_type == \"Individual\") {\n            frm.set_df_property('tin_code', 'options', [\n                \"IG\",\n                \"SG\",\n                \"OG\",\n                \"EI\"\n            ]);\n            frm.set_value('tin_code', \"IG\");\n        } else if (frm.doc.customer_type == \"Foreign\") {\n            frm.set_df_property('tin_code', 'options', [\n                \"EI\"\n            ]);\n            frm.set_value('tin_code', \"EI\");\n        } else {\n            frm.set_df_property('tin_code', 'options', [\n                \"C - Companies\",\n                \"CS - Cooperative Societies\",\n                \"D - Partnerships\",\n                \"E - Employers\",\n                \"F - Associations\",\n                \"FA - Non-Resident Public Entertainers\",\n                \"PT - Limited Liability Partnerships\",\n                \"TA - Trust Bodies\",\n                \"TC - Unit Trusts/ Property Trusts\",\n                \"TN - Business Trusts\" ,\n                \"TR - Real Estate Investment Trusts/Property Trust Funds\",\n                \"TP - Deceased Person’s Estate\",\n                \"J - Hindu Joint Families\",\n                \"LE - Labuan Entities\"\n            ]);\n            frm.set_value('tin_code', \"C - Companies\");\n        }\n    },\n     \n    msic: function(frm) {\n        if (frm.doc.msic) {\n            frappe.call({\n                method: \"frappe.client.get\",\n                args: {\n                    \"doctype\": \"Industrial Classification\",\n                    name: frm.doc.msic\n                },\n                callback: function(response) {\n                    if (response.message) {\n                        var description = response.message.description;\n                        frm.set_value('msic_description', description);\n                    }\n                }\n            });\n        }\n    }\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Company",
  "enabled": 1,
  "modified": "2025-07-29 09:50:18.805547",
  "module": "LineClear Custom",
  "name": "Company",
  "script": "frappe.ui.form.on('Company', {\n\trefresh(frm) {\n\t\t $(frm.fields_dict['custom_msic_codes'].input).on('keyup', function() {\n            frm.set_query('custom_msic_codes', function() {\n                return {\n                    query:\"lineclear_custom.lineclear_custom.get_msic_option.get_industrial_classification_options\"\n                };\n            });\n        });\n        \n        frm.set_query('custom_default_tax_account', function() {\n            return {\n                filters: {\n                    account_type: 'Tax',\n                    company: frm.doc.name  // or frm.doc.company if your field is named `company`\n                }\n            };\n        });\n\t},\n\t\n\tcustom_msic_codes: function(frm) {\n        if (frm.doc.custom_msic_codes) {\n            frappe.call({\n                method: \"frappe.client.get\",\n                args: {\n                    \"doctype\": \"Industrial Classification\",\n                    name: frm.doc.custom_msic_codes\n                },\n                callback: function(response) {\n                    if (response.message) {\n                        var description = response.message.description;\n                        frm.set_value('custom_misc_description', description);\n                    }\n                }\n            });\n        }\n    }\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Journal Entry",
  "enabled": 1,
  "modified": "2025-08-15 10:39:05.006371",
  "module": "LineClear Custom",
  "name": "Journal Entry E-invoice Submit",
  "script": "frappe.ui.form.on('Journal Entry', {\n\trefresh(frm) {\n\t\tif (frm.doc.docstatus == \"1\" && (frm.doc.voucher_type == \"Debit Note\" || frm.doc.voucher_type == \"Credit Note\")){\n\t\t    if (frm.doc.custom_lhdn_status != \"Valid\" & frm.doc.custom_lhdn_status != \"InProgress\" & frm.doc.custom_lhdn_status != \"Processed\" & frm.doc.custom_lhdn_enable_control){\n                frm.add_custom_button(__(\"Send invoice\"), function() {\n                    frm.call({\n                        method:\"lineclear_custom.lineclear_custom.journal_entry_invoice.lhdn_Background\",\n                        args: {\n                            \"doc_number\": frm.doc.name,\n                        },\n                        callback: function(response) {\n                            if (response.message) {  \n                                frm.reload_doc();\n                            }\n                            frm.reload_doc();\n                        }\n                    });\n                    frm.reload_doc();\n                }, __(\"EInvoice\"));\n            }\n        }\n        if (!frm.doc.custom_lhdn_status || frm.doc.custom_lhdn_status === \"Valid\") {\n            frm.set_df_property(\"refresh_status\", 'hidden', 1);\n        } else {\n            frm.set_df_property(\"refresh_status\", 'hidden', 0);\n        }\n\t},\n\trefresh_status:function(frm){\n        frm.call({\n            method:\"lineclear_custom.lineclear_custom.journal_entry_invoice.refresh_doc_status\",\n            args: {\n                \"uuid\": frm.doc.custom_uuid,\n                \"doc_number\":frm.doc.name\n            },\n            callback: function(response) {\n                if (response.message) {  \n                    frm.reload_doc();\n                }\n                frm.reload_doc();\n            }\n        });\n        frm.reload_doc();\n    },\n    custom_lhdn_status: function(frm) {\n        if (!frm.doc.custom_lhdn_status || frm.doc.custom_lhdn_status === \"Valid\") {\n            frm.set_df_property(\"refresh_status\", 'hidden', 1);\n        } else {\n            frm.set_df_property(\"refresh_status\", 'hidden', 0);\n        }\n    }\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Address",
  "enabled": 1,
  "modified": "2025-03-06 07:50:29.709295",
  "module": "LineClear Custom",
  "name": "Address",
  "script": "frappe.ui.form.on('Address', {\n\trefresh(frm) {\n\t\tfrm.set_df_property('address_type', 'options', ['Billing', 'Pickup', 'Shipping', 'Office', 'Personal', 'Plant', 'Postal', 'Shop', 'Subsidiary', 'Warehouse', 'Current', 'Permanent', 'Other']);\n\t}\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Journal Entry",
  "enabled": 1,
  "modified": "2025-08-19 15:47:42.347474",
  "module": "LineClear Custom",
  "name": "Journal Entry",
  "script": "frappe.ui.form.on('Journal Entry', {\r\n    refresh: function (frm) {\r\n        hide_ui(frm);\r\n        check_entry_type(frm);\r\n        set_account_query(frm);\r\n        if(frm.doc.voucher_type == \"Debit Note\" || frm.doc.voucher_type == \"Credit Note\"){\r\n            set_reference_name_query(frm);\r\n        }\r\n    },\r\n    voucher_type: function(frm) {\r\n        check_entry_type(frm);\r\n        if(frm.doc.voucher_type == \"Debit Note\" || frm.doc.voucher_type == \"Credit Note\"){\r\n            update_accounting(frm);\r\n        }\r\n    },\r\n    validate: function(frm) {\r\n        if(frm.doc.voucher_type == \"Debit Note\" || frm.doc.voucher_type == \"Credit Note\"){\r\n            update_accounting(frm);\r\n        }\r\n    },\r\n    customer: function(frm, cdt, cdn){\r\n        set_reference_name_query(frm);\r\n    },\r\n    accounting_type: function(frm, cdt, cdn) {\r\n        if(frm.doc.voucher_type == \"Debit Note\" || frm.doc.voucher_type == \"Credit Note\"){\r\n            update_accounting(frm);\r\n            check_entry_type(frm);\r\n            set_reference_name_query(frm);\r\n            set_account_query(frm);\r\n            set_tax_type(frm, cdt, cdn);\r\n        }\r\n    }\r\n});\r\n\r\nfrappe.ui.form.on('Journal Entry LHDN', {\r\n    account: function(frm, cdt, cdn) {\r\n        add_tax_account(frm, cdt, cdn);\r\n    },\r\n    amount: function(frm, cdt, cdn){\r\n        update_item_tax_amount(frm, cdt, cdn);\r\n        update_accounting(frm, cdt, cdn);\r\n    },\r\n    tax_code: function(frm, cdt, cdn){\r\n        update_item_tax_amount(frm, cdt, cdn);\r\n        update_accounting(frm, cdt, cdn);\r\n    },\r\n    form_render: function (frm, cdt, cdn) {\r\n        set_tax_type(frm, cdt, cdn);\r\n    }\r\n});\r\n\r\nfunction hide_ui(frm){\r\n    frm.set_df_property('from_template', 'hidden', 1);\r\n    frm.set_df_property('company', 'hidden', 1);\r\n    // frm.set_df_property('naming_series', 'hidden', 1);\r\n    frm.set_df_property('debtor_code', 'hidden', 1);\r\n    frm.set_df_property('multi_currency', 'hidden', 1);\r\n    // frm.set_df_property('cheque_date', 'hidden', 1);\r\n    // frm.set_df_property('cheque_no', 'hidden', 1);\r\n    frm.set_df_property('bill_no', 'hidden', 1);\r\n    frm.set_df_property('bill_date', 'hidden', 1);\r\n    frm.set_df_property('due_date', 'hidden', 1);\r\n    frm.set_df_property('pay_to_recd_from', 'hidden', 1);\r\n    frm.set_df_property('letter_head', 'hidden', 1);\r\n    frm.set_df_property('select_print_heading', 'hidden', 1);\r\n    frm.set_df_property('currency', 'hidden', 1);\r\n}\r\n\r\nfunction set_accounting_entries_reference_type(frm){\r\n    let reference_type_field = frm.fields_dict['custom_accounting_entires'].grid.get_field('reference_type');\r\n    if (frm.doc.accounting_type === \"Accounts Receivable\") {\r\n        reference_type_field.options = [\"Sales Invoice\", \"Journal Entry\"];\r\n    } else if (frm.doc.accounting_type === \"Accounts Payable\") {\r\n        reference_type_field.options = [\"Purchase Invoice\", \"Journal Entry\"];\r\n    } else {\r\n        reference_type_field.options = [];\r\n    }\r\n}\r\n\r\nfunction set_tax_type(frm, cdt, cdn) {\r\n    let item = locals[cdt][cdn];\r\n    if(frm.doc.accounting_type == \"Accounts Receivable\") {\r\n        item.tax_type = 'Sales Taxes and Charges Template';\r\n    } else if(frm.doc.accounting_type == \"Accounts Payable\") {\r\n        item.tax_type = 'Purchase Taxes and Charges Template';\r\n    }\r\n    frm.refresh_field('custom_accounting_entires');\r\n}\r\n\r\nfunction check_entry_type(frm) {\r\n    if (frm.doc.docstatus == 1){\r\n        if (!frm.doc.custom_accounting_entires || frm.doc.custom_accounting_entires.length === 0) {\r\n            frm.set_df_property('custom_accounting_entires', 'hidden', 1);\r\n            // frm.set_df_property('accounts', 'hidden', 0);\r\n        } else if (frm.doc.voucher_type == \"Debit Note\" || frm.doc.voucher_type == \"Credit Note\"){\r\n            frm.set_df_property('custom_accounting_entires', 'hidden', 0);\r\n            // frm.set_df_property('accounts', 'hidden', 1);\r\n        }\r\n    } else if (frm.doc.docstatus == 0){\r\n        if(frm.doc.voucher_type == \"Debit Note\" || frm.doc.voucher_type == \"Credit Note\"){\r\n            frm.set_df_property('custom_accounting_entires', 'hidden', 0);\r\n            frm.set_df_property('accounts', 'hidden', 1);\r\n            if(frm.doc.accounting_type == \"Accounts Receivable\") {\r\n                frm.set_df_property('customer', 'reqd', 1);\r\n                frm.set_df_property('supplier', 'reqd', 0);\r\n                frm.set_value('supplier', '');\r\n                frm.set_value('creditor_code', '');\r\n            } else if (frm.doc.accounting_type == \"Accounts Payable\") {\r\n                frm.set_df_property('supplier', 'reqd', 1);\r\n                frm.set_df_property('customer', 'reqd', 0);\r\n                frm.set_value('customer', '');\r\n                frm.set_value('debtor_code', '');\r\n            }\r\n        } else {\r\n            frm.set_df_property('custom_accounting_entires', 'hidden', 1);\r\n            frm.set_df_property('accounts', 'hidden', 0);\r\n            frm.set_df_property('customer', 'reqd', 0);\r\n            frm.set_df_property('supplier', 'reqd', 0);\r\n        }\r\n    }\r\n}\r\n\r\nfunction add_tax_account(frm, cdt, cdn) {\r\n    let row = locals[cdt][cdn];\r\n    if (!row.tax_account && frm.doc.company) {\r\n        frappe.db.get_value('Company', frm.doc.company, 'custom_default_tax_account')\r\n            .then(r => {\r\n                if (r.message && r.message.custom_default_tax_account) {\r\n                    frappe.model.set_value(cdt, cdn, 'tax_account', r.message.custom_default_tax_account);\r\n                }\r\n            });\r\n    }\r\n}\r\n\r\nfunction set_account_query(frm) {\r\n    if(frm.doc.accounting_type == \"Accounts Receivable\") {\r\n        frm.fields_dict['custom_accounting_entires'].grid.get_field('account').get_query = function(doc, cdt, cdn) {\r\n            return {\r\n                filters: {\r\n                    account_type: [\"!=\", \"Receivable\"],\r\n                    company: doc.company\r\n                }\r\n            };\r\n        };\r\n        frm.fields_dict['custom_accounting_entires'].grid.get_field('tax_code').get_query = function(doc, cdt, cdn) {\r\n            return {\r\n            };\r\n        };\r\n    } else if(frm.doc.accounting_type == \"Accounts Payable\") {\r\n        frm.fields_dict['custom_accounting_entires'].grid.get_field('account').get_query = function(doc, cdt, cdn) {\r\n            return {\r\n                filters: {\r\n                    account_type: [\"!=\", \"Payable\"],\r\n                    company: doc.company\r\n                }\r\n            };\r\n        };\r\n        frm.fields_dict['custom_accounting_entires'].grid.get_field('tax_code').get_query = function(doc, cdt, cdn) {\r\n            return {\r\n            };\r\n        };\r\n    } else {\r\n        frm.fields_dict['custom_accounting_entires'].grid.get_field('account').get_query = function(doc, cdt, cdn) {\r\n            return {\r\n                filters: {\r\n                    name: \"__invalid__\" //will never match any account\r\n                }\r\n            };\r\n        };\r\n    }\r\n    frm.fields_dict['custom_accounting_entires'].grid.get_field('tax_account').get_query = function(doc, cdt, cdn) {\r\n        return {\r\n            filters: {\r\n                account_type: [\"=\", \"Tax\"],\r\n                company: doc.company\r\n            }\r\n        };\r\n    };\r\n}\r\n\r\nfunction set_reference_name_query(frm) {\r\n    frm.fields_dict['custom_accounting_entires'].grid.get_field('reference').get_query = function(doc, cdt, cdn) {\r\n        let row = locals[cdt][cdn];\r\n        if (frm.doc.accounting_type == \"Accounts Receivable\") {\r\n            if (!frm.doc.customer || !row.reference_type) {\r\n                return {\r\n                    filters: {\r\n                        name: '__invalid__'  // returns nothing\r\n                    }\r\n                };\r\n            }\r\n            if (row.reference_type === \"Sales Invoice\") {\r\n                return {\r\n                    filters: {\r\n                        customer: doc.customer,\r\n                        docstatus: 1\r\n                    }\r\n                };\r\n            } else if (row.reference_type === \"Journal Entry\") {\r\n                return {\r\n                    filters: {\r\n                        customer: doc.customer,\r\n                        docstatus: 1\r\n                    }\r\n                };\r\n            } else {\r\n                return {\r\n                    filters: {\r\n                        name: '__invalid__'  // returns nothing\r\n                    }\r\n                };\r\n            }\r\n        } else if (frm.doc.accounting_type == \"Accounts Payable\") {\r\n            if (!frm.doc.supplier || !row.reference_type) {\r\n                return {\r\n                    filters: {\r\n                        name: '__invalid__'  // returns nothing\r\n                    }\r\n                };\r\n            }\r\n            if (row.reference_type === \"Purchase Invoice\") {\r\n                return {\r\n                    filters: {\r\n                        supplier: doc.supplier,\r\n                        docstatus: 1\r\n                    }\r\n                };\r\n            } else if (row.reference_type === \"Journal Entry\") {\r\n                return {\r\n                    filters: {\r\n                        supplier: doc.supplier,\r\n                        docstatus: 1\r\n                    }\r\n                };\r\n            } else {\r\n                return {\r\n                    filters: {\r\n                        name: '__invalid__'  // returns nothing\r\n                    }\r\n                };\r\n            }\r\n        } else {\r\n            return {\r\n                filters: {\r\n                    name: '__invalid__'  // returns nothing\r\n                }\r\n            };\r\n        }\r\n    };\r\n}\r\n\r\n\r\n function update_item_tax_amount(frm, cdt, cdn){\r\n    let row = locals[cdt][cdn];\r\n    if(row.tax_code){\r\n        if(frm.doc.accounting_type == \"Accounts Receivable\") {\r\n            frappe.call({\r\n                method: \"frappe.client.get\",\r\n                args: {\r\n                    doctype: \"Sales Taxes and Charges Template\",\r\n                    name: row.tax_code\r\n                },\r\n                callback: function(r) {\r\n                    if (r.message && r.message.taxes && r.message.taxes.length > 0) {\r\n                        // Assuming you want to apply the first tax rate\r\n                        let tax_rate = r.message.taxes[0].rate;\r\n                        \r\n                        let tax_amount = row.amount * (tax_rate / 100);\r\n                        frappe.model.set_value(cdt, cdn, 'tax_amount', tax_amount);\r\n                    }\r\n                }\r\n            });\r\n        } else if (frm.doc.accounting_type == 'Accounts Payable') {\r\n            frappe.call({\r\n                method: \"frappe.client.get\",\r\n                args: {\r\n                    doctype: \"Purchase Taxes and Charges Template\",\r\n                    name: row.tax_code\r\n                },\r\n                callback: function(r) {\r\n                    if (r.message && r.message.taxes && r.message.taxes.length > 0) {\r\n                        // Assuming you want to apply the first tax rate\r\n                        let tax_rate = r.message.taxes[0].rate;\r\n                        \r\n                        let tax_amount = row.amount * (tax_rate / 100);\r\n                        frappe.model.set_value(cdt, cdn, 'tax_amount', tax_amount);\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    } else {\r\n        frappe.model.set_value(cdt, cdn, 'tax_amount', 0);\r\n    }\r\n}\r\n\r\nfunction update_accounting(frm) {\r\n    frm.clear_table('accounts');\r\n    let total_tax_amount = 0;\r\n    if (frm.doc.accounting_type == \"Accounts Receivable\") {\r\n        if (frm.doc.customer){\r\n            return frappe.db.get_doc('Customer', frm.doc.customer).then(customer => {\r\n                let debtor_account = \"\";\r\n        \r\n                const customer_account = customer.accounts.find(acc => acc.company === frm.doc.company);\r\n        \r\n                if (customer_account) {\r\n                    debtor_account = customer_account.account;\r\n                } else if (customer.custom_debtor_type === 'NTD') {\r\n                    debtor_account = \"300-1000 - NON TRADE DEBTORS - LCESB\";\r\n                } else {\r\n                    debtor_account = \"300-0000 - TRADE DEBTORS - LCESB\";\r\n                }\r\n        \r\n                \r\n                (frm.doc.custom_accounting_entires || []).forEach(item => {\r\n                    total_tax_amount += item.tax_amount;\r\n                    // Debtor row\r\n                    let accounting_debtor = frm.add_child('accounts');\r\n                    accounting_debtor.account = debtor_account;\r\n                    accounting_debtor.party_type = \"Customer\";\r\n                    accounting_debtor.party = frm.doc.customer;\r\n                    accounting_debtor.custom_description = item.description;\r\n        \r\n                    if (frm.doc.voucher_type === \"Debit Note\") {\r\n                        accounting_debtor.debit_in_account_currency = item.amount + item.tax_amount;\r\n                    } else if (frm.doc.voucher_type === \"Credit Note\") {\r\n                        accounting_debtor.credit_in_account_currency = item.amount + item.tax_amount;\r\n                    }\r\n        \r\n                    accounting_debtor.reference_type = item.reference_type;\r\n                    accounting_debtor.reference_name = item.reference;\r\n                    accounting_debtor.custom_tax_code = item.tax_code;\r\n                    accounting_debtor.custom_tax_amount = item.tax_amount;\r\n        \r\n                    // Income row\r\n                    let accounting_income = frm.add_child('accounts');\r\n                    accounting_income.account = item.account;\r\n                    accounting_income.custom_description = item.description;\r\n        \r\n                    if (frm.doc.voucher_type === \"Credit Note\") {\r\n                        accounting_income.debit_in_account_currency = item.amount;\r\n                    } else if (frm.doc.voucher_type === \"Debit Note\") {\r\n                        accounting_income.credit_in_account_currency = item.amount;\r\n                    }\r\n        \r\n                    accounting_income.custom_tax_code = item.tax_code;\r\n                    accounting_income.custom_tax_amount = item.tax_amount;\r\n                    accounting_income.cost_center = item.cost_center\r\n        \r\n                    // Tax row\r\n                    if (item.tax_amount != 0) {\r\n                        let accounting_tax = frm.add_child('accounts');\r\n                        accounting_tax.account = item.tax_account;\r\n                        accounting_tax.custom_description = item.description;\r\n        \r\n                        if (frm.doc.voucher_type === \"Credit Note\") {\r\n                            accounting_tax.debit_in_account_currency = item.tax_amount;\r\n                        } else if (frm.doc.voucher_type === \"Debit Note\") {\r\n                            accounting_tax.credit_in_account_currency = item.tax_amount;\r\n                        }\r\n        \r\n                        accounting_tax.custom_tax_code = item.tax_code;\r\n                        accounting_tax.custom_tax_amount = item.tax_amount;\r\n                        accounting_tax.cost_center = item.cost_center\r\n                    }\r\n                });\r\n                frm.set_value(\"custom_total_tax_amount\", total_tax_amount);\r\n        \r\n                frm.refresh_field('accounts');\r\n            });\r\n        }\r\n    } else if (frm.doc.accounting_type == \"Accounts Payable\") {\r\n        if (frm.doc.supplier){\r\n            return frappe.db.get_doc('Supplier', frm.doc.supplier).then(supplier => {\r\n                let creditor_account = \"\";\r\n        \r\n                const supplier_account = supplier.accounts.find(acc => acc.company === frm.doc.company);\r\n        \r\n                if (supplier_account) {\r\n                    creditor_account = supplier_account.account;\r\n                } else if (supplier.supplier_type === 'Non-Trade (Bank)') {\r\n                    creditor_account = \"400-1000 - OTHER CREDITORS - LCESB\";\r\n                } else if (supplier.supplier_type === 'HIRE PURCHASE CREDITOR') {\r\n                    creditor_account = \"420-0000 - HIRE PURCHASE CREDITOR - LCESB\";\r\n                } else if (supplier.supplier_type === 'Non-Trade Creditor') {\r\n                    creditor_account = \"400-1000 - OTHER CREDITORS - LCESB\";\r\n                } else if (supplier.supplier_type === \"Staff's Claim\") {\r\n                    creditor_account = \"400-1000 - OTHER CREDITORS - LCESB\";\r\n                } else {\r\n                    creditor_account = \"400-0000 - TRADE CREDITORS - LCESB\";\r\n                }\r\n        \r\n                \r\n                (frm.doc.custom_accounting_entires || []).forEach(item => {\r\n                    total_tax_amount += item.tax_amount;\r\n                    // Creditor row\r\n                    let accounting_debtor = frm.add_child('accounts');\r\n                    accounting_debtor.account = creditor_account;\r\n                    accounting_debtor.party_type = \"Supplier\";\r\n                    accounting_debtor.party = frm.doc.supplier;\r\n                    accounting_debtor.custom_description = item.description;\r\n        \r\n                    if (frm.doc.voucher_type === \"Credit Note\") {\r\n                        accounting_debtor.debit_in_account_currency = item.amount + item.tax_amount;\r\n                    } else if (frm.doc.voucher_type === \"Debit Note\") {\r\n                        accounting_debtor.credit_in_account_currency = item.amount + item.tax_amount;\r\n                    }\r\n        \r\n                    accounting_debtor.reference_type = item.reference_type;\r\n                    accounting_debtor.reference_name = item.reference;\r\n                    accounting_debtor.ap_tax_code = item.tax_code;\r\n                    accounting_debtor.custom_tax_amount = item.tax_amount;\r\n        \r\n                    // Income row\r\n                    let accounting_income = frm.add_child('accounts');\r\n                    accounting_income.account = item.account;\r\n                    accounting_income.custom_description = item.description;\r\n        \r\n                    if (frm.doc.voucher_type === \"Debit Note\") {\r\n                        accounting_income.debit_in_account_currency = item.amount;\r\n                    } else if (frm.doc.voucher_type === \"Credit Note\") {\r\n                        accounting_income.credit_in_account_currency = item.amount;\r\n                    }\r\n        \r\n                    accounting_income.ap_tax_code = item.tax_code;\r\n                    accounting_income.custom_tax_amount = item.tax_amount;\r\n                    accounting_income.cost_center = item.cost_center\r\n        \r\n                    // Tax row\r\n                    if (item.tax_amount != 0) {\r\n                        let accounting_tax = frm.add_child('accounts');\r\n                        accounting_tax.account = item.tax_account;\r\n                        accounting_tax.custom_description = item.description;\r\n        \r\n                        if (frm.doc.voucher_type === \"Debit Note\") {\r\n                            accounting_tax.debit_in_account_currency = item.tax_amount;\r\n                        } else if (frm.doc.voucher_type === \"Credit Note\") {\r\n                            accounting_tax.credit_in_account_currency = item.tax_amount;\r\n                        }\r\n        \r\n                        accounting_tax.ap_tax_code = item.tax_code;\r\n                        accounting_tax.custom_tax_amount = item.tax_amount;\r\n                        accounting_tax.cost_center = item.cost_center\r\n                    }\r\n                });\r\n                frm.set_value(\"custom_total_tax_amount\", total_tax_amount);\r\n        \r\n                frm.refresh_field('accounts');\r\n            });\r\n        }\r\n    }\r\n}\r\n\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Material Request",
  "enabled": 1,
  "modified": "2025-04-08 08:42:15.110466",
  "module": "LineClear Custom",
  "name": "SalesUserAssign",
  "script": "frappe.ui.form.on('Material Request', {\n\trefresh(frm) {\n\t\tif (!frm.doc.custom_salesperson){\n            frm.doc.custom_salesperson = frappe.session.user;\n\t\t}\n\t}\n\t\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Purchase Invoice",
  "enabled": 1,
  "modified": "2025-08-15 10:37:27.764505",
  "module": "LineClear Custom",
  "name": "Purchase Invoice E-invoice Submit",
  "script": "frappe.ui.form.on('Purchase Invoice', {\n\trefresh(frm) {\n\t\tif (frm.doc.docstatus == \"1\"){\n\t\t    if (frm.doc.custom_lhdn_status != \"Valid\" & frm.doc.custom_self_bill_invoice & frm.doc.custom_lhdn_status != \"InProgress\" & frm.doc.custom_lhdn_status != \"Processed\"){\n                frm.add_custom_button(__(\"Send invoice\"), function() {\n                    frm.call({\n                        method:\"lineclear_custom.lineclear_custom.purchase_invoice.lhdn_Background\",\n                        args: {\n                            \"doc_number\": frm.doc.name,\n                        },\n                        callback: function(response) {\n                            if (response.message) {  \n                                frm.reload_doc();\n                            }\n                            frm.reload_doc();\n                        }\n                    });\n                    frm.reload_doc();\n                }, __(\"EInvoice\"));\n            }\n        }\n        if (!frm.doc.custom_lhdn_status || frm.doc.custom_lhdn_status === \"Valid\") {\n            frm.set_df_property(\"custom_refresh_status\", 'hidden', 1);\n        } else {\n            frm.set_df_property(\"custom_refresh_status\", 'hidden', 0);\n        }\n\t},\n\tcustom_refresh_status: function(frm){\n        frm.call({\n            method:\"lineclear_custom.lineclear_custom.purchase_invoice.refresh_doc_status\",\n            args: {\n                \"uuid\": frm.doc.custom_uuid,\n                \"doc_number\":frm.doc.name\n            },\n            callback: function(response) {\n                if (response.message) {  \n                    frm.reload_doc();\n                }\n                frm.reload_doc();\n            }\n        });\n        frm.reload_doc();\n    },\n    custom_lhdn_status: function(frm) {\n        if (!frm.doc.custom_lhdn_status || frm.doc.custom_lhdn_status === \"Valid\") {\n            frm.set_df_property(\"custom_refresh_status\", 'hidden', 1);\n        } else {\n            frm.set_df_property(\"custom_refresh_status\", 'hidden', 0);\n        }\n    }\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Supplier",
  "enabled": 1,
  "modified": "2025-06-13 16:12:55.740143",
  "module": "LineClear Custom",
  "name": "Supplier Customization",
  "script": "frappe.ui.form.on('Supplier', {\n\tcustom_tin_number: function(frm) {\n        if (frm.doc.custom_tin_number) {\n            let tax_id = \"\";\n            if (frm.doc.custom_tin_code) {\n                tax_id += frm.doc.custom_tin_code.split(\" - \")[0];\n            }\n            tax_id += frm.doc.custom_tin_number;\n            frm.set_value('custom_lhdn_tax_id', tax_id);\n        } else{\n            frm.set_value('custom_lhdn_tax_id', \"\");\n        }\n    },\n    custom_tin_code: function(frm) {\n        if (frm.doc.custom_tin_code && frm.doc.custom_tin_number) {\n            let tax_id = \"\";\n            if (frm.doc.custom_tin_code) {\n                tax_id += frm.doc.custom_tin_code.split(\" - \")[0];\n            }\n            tax_id += frm.doc.custom_tin_number;\n            frm.set_value('custom_lhdn_tax_id', tax_id);\n        }\n    }\n});",
  "view": "Form"
 }
]